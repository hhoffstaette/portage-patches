diff -rup elogind-255.5/src/login/logind-dbus.c elogind-255.5-nowarn/src/login/logind-dbus.c
--- elogind-255.5/src/login/logind-dbus.c	2024-04-30 09:39:20.000000000 +0200
+++ elogind-255.5-nowarn/src/login/logind-dbus.c	2024-09-02 12:47:30.449844565 +0200
@@ -891,7 +891,6 @@ static int create_session(
                 /* Wut? There's already a session by this name and we didn't find it above? Weird, then let's
                  * not trust the audit data and let's better register a new ID */
                 if (hashmap_contains(m->sessions, id)) {
-                        log_warning("Existing logind session ID %s used by new audit session, ignoring.", id);
                         audit_id = AUDIT_SESSION_INVALID;
                         id = mfree(id);
                 }
diff -rup elogind-255.5/src/login/logind-session.c elogind-255.5-nowarn/src/login/logind-session.c
--- elogind-255.5/src/login/logind-session.c	2024-04-30 09:39:20.000000000 +0200
+++ elogind-255.5-nowarn/src/login/logind-session.c	2024-09-02 12:51:06.341677063 +0200
@@ -844,13 +844,6 @@ int session_start(Session *s, sd_bus_mes
         if (r < 0)
                 return r;
 
-        log_struct(s->class == SESSION_BACKGROUND ? LOG_DEBUG : LOG_INFO,
-                   "MESSAGE_ID=" SD_MESSAGE_SESSION_START_STR,
-                   "SESSION_ID=%s", s->id,
-                   "USER_ID=%s", s->user->user_record->user_name,
-                   "LEADER="PID_FMT, s->leader.pid,
-                   LOG_MESSAGE("New session %s of user %s.", s->id, s->user->user_record->user_name));
-
         if (!dual_timestamp_is_set(&s->timestamp))
                 dual_timestamp_now(&s->timestamp);
 
@@ -911,16 +904,6 @@ static int session_stop_scope(Session *s
 
                         log_warning_errno(r, "Failed to stop session scope, ignoring: %s", bus_error_message(&error, r));
                 }
-        } else {
-
-                /* With no killing, this session is allowed to persist in "closing" state indefinitely.
-                 * Therefore session stop and session removal may be two distinct events.
-                 * Session stop is quite significant on its own, let's log it. */
-                log_struct(s->class == SESSION_BACKGROUND ? LOG_DEBUG : LOG_INFO,
-                           "SESSION_ID=%s", s->id,
-                           "USER_ID=%s", s->user->user_record->user_name,
-                           "LEADER="PID_FMT, s->leader.pid,
-                           LOG_MESSAGE("Session %s logged out. Waiting for processes to exit.", s->id));
         }
 
         return 0;
@@ -997,18 +980,6 @@ int session_finalize(Session *s) {
         if (!s->user)
                 return -ESTALE;
 
-        if (s->started)
-                log_struct(s->class == SESSION_BACKGROUND ? LOG_DEBUG : LOG_INFO,
-                           "MESSAGE_ID=" SD_MESSAGE_SESSION_STOP_STR,
-                           "SESSION_ID=%s", s->id,
-                           "USER_ID=%s", s->user->user_record->user_name,
-                           "LEADER="PID_FMT, s->leader.pid,
-                           LOG_MESSAGE("Removed session %s.", s->id));
-#if 1 /// let elogind at least put out a debug message if s was not started
-        else
-                log_debug_elogind("Session %s not started, finalizing...", s->id);
-#endif // 1
-
         s->timer_event_source = sd_event_source_unref(s->timer_event_source);
         s->leader_pidfd_event_source = sd_event_source_unref(s->leader_pidfd_event_source);
 
