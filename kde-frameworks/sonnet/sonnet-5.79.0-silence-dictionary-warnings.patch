diff -rup sonnet-5.79.0/src/core/loader.cpp sonnet-5.79.0-nowarn/src/core/loader.cpp
--- sonnet-5.79.0/src/core/loader.cpp	2021-02-06 19:29:42.000000000 +0100
+++ sonnet-5.79.0-nowarn/src/core/loader.cpp	2021-02-13 14:45:56.572682946 +0100
@@ -79,10 +79,8 @@ SpellerPlugin *Loader::createSpeller(con
     auto clientsItr = d->languageClients.constFind(plang);
     if (clientsItr == d->languageClients.constEnd()) {
         if (language.isEmpty()) {
-            qCWarning(SONNET_LOG_CORE) << "No language dictionaries for the language:" << plang << "trying to load en_US as default";
             return createSpeller(QStringLiteral("en_US"), clientName);
         }
-        qCWarning(SONNET_LOG_CORE) << "No language dictionaries for the language:" << plang;
         Q_EMIT loadingDictionaryFailed(plang);
         return nullptr;
     }
@@ -97,7 +95,6 @@ SpellerPlugin *Loader::createSpeller(con
             bool unknown = !std::any_of(lClients.constBegin(), lClients.constEnd(), [backend] (const Client *client) {
                     return client->name() == backend; });
             if (unknown) {
-                qCWarning(SONNET_LOG_CORE) << "Default client" << backend << "doesn't support language:" << plang;
                 backend = QString();
             }
         }
@@ -121,7 +118,6 @@ SpellerPlugin *Loader::createSpeller(con
         }
     }
 
-    qCWarning(SONNET_LOG_CORE) << "The default client" << backend << "has no language dictionaries for the language:" << plang;
     return nullptr;
 }
 
@@ -293,7 +289,6 @@ void Loader::loadPlugins()
         }
     }
     if (plugins == 0) {
-        qCWarning(SONNET_LOG_CORE) << "Sonnet: No speller backends available!";
     }
 #else
 #ifdef Q_OS_MACOS
